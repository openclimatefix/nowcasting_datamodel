"""Add metric models

Revision ID: 3e6942391f0c
Revises: 8eb6900d2e80
Create Date: 2022-08-24 09:36:13.958479

"""

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "3e6942391f0c"
down_revision = "8eb6900d2e80"
branch_labels = None
depends_on = None


def upgrade():  # noqa
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "datetime_interval",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("start_datetime_utc", sa.DateTime(), nullable=True),
        sa.Column("end_datetime_utc", sa.DateTime(), nullable=True),
        sa.Column("elexon_settlement_period", sa.Integer(), nullable=True),
        sa.Column("is_primary", sa.Boolean(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_datetime_interval_end_datetime_utc"),
        "datetime_interval",
        ["end_datetime_utc"],
        unique=False,
    )
    op.create_index(
        op.f("ix_datetime_interval_start_datetime_utc"),
        "datetime_interval",
        ["start_datetime_utc"],
        unique=False,
    )
    op.create_index(
        "ix_end_datetime_utc", "datetime_interval", [sa.text("end_datetime_utc DESC")], unique=False
    )
    op.create_index(
        "ix_start_datetime_utc",
        "datetime_interval",
        [sa.text("start_datetime_utc DESC")],
        unique=False,
    )
    op.create_index(
        "uix_2",
        "datetime_interval",
        ["start_datetime_utc", "end_datetime_utc"],
        unique=True,
        postgresql_where=sa.text("is_primary"),
    )
    op.create_table(
        "metric",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("description", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "metric_value",
        sa.Column("created_utc", sa.DateTime(timezone=True), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("value", sa.Float(), nullable=False),
        sa.Column("number_of_data_points", sa.Integer(), nullable=False),
        sa.Column("metric_id", sa.Integer(), nullable=True),
        sa.Column("location_id", sa.Integer(), nullable=True),
        sa.Column("datetime_interval_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["datetime_interval_id"],
            ["datetime_interval.id"],
        ),
        sa.ForeignKeyConstraint(
            ["location_id"],
            ["location.id"],
        ),
        sa.ForeignKeyConstraint(
            ["metric_id"],
            ["metric.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_metric_value_datetime_interval_id"),
        "metric_value",
        ["datetime_interval_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_metric_value_location_id"), "metric_value", ["location_id"], unique=False
    )
    op.create_index(op.f("ix_metric_value_metric_id"), "metric_value", ["metric_id"], unique=False)
    # ### end Alembic commands ###


def downgrade():  # noqa
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_metric_value_metric_id"), table_name="metric_value")
    op.drop_index(op.f("ix_metric_value_location_id"), table_name="metric_value")
    op.drop_index(op.f("ix_metric_value_datetime_interval_id"), table_name="metric_value")
    op.drop_table("metric_value")
    op.drop_table("metric")
    op.drop_index("uix_2", table_name="datetime_interval", postgresql_where=sa.text("is_primary"))
    op.drop_index("ix_start_datetime_utc", table_name="datetime_interval")
    op.drop_index("ix_end_datetime_utc", table_name="datetime_interval")
    op.drop_index(op.f("ix_datetime_interval_start_datetime_utc"), table_name="datetime_interval")
    op.drop_index(op.f("ix_datetime_interval_end_datetime_utc"), table_name="datetime_interval")
    op.drop_table("datetime_interval")
    # ### end Alembic commands ###
