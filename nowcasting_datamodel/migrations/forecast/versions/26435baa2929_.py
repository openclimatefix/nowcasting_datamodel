"""empty message

Revision ID: 26435baa2929
Revises: 3ed9d8d4ff1f
Create Date: 2022-11-01 21:33:13.458726

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "26435baa2929"
down_revision = "3ed9d8d4ff1f"
branch_labels = None
depends_on = None


def downgrade():  # noqa
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("forecast_value_2023_08_created_utc_idx", table_name="forecast_value_2023_08")
    op.drop_index("forecast_value_2023_08_forecast_id_idx", table_name="forecast_value_2023_08")
    op.drop_index("forecast_value_2023_08_target_time_idx", table_name="forecast_value_2023_08")
    op.drop_table("forecast_value_2023_08")
    op.drop_index("forecast_value_2023_01_created_utc_idx", table_name="forecast_value_2023_01")
    op.drop_index("forecast_value_2023_01_forecast_id_idx", table_name="forecast_value_2023_01")
    op.drop_index("forecast_value_2023_01_target_time_idx", table_name="forecast_value_2023_01")
    op.drop_table("forecast_value_2023_01")
    op.drop_index("forecast_value_2022_12_created_utc_idx", table_name="forecast_value_2022_12")
    op.drop_index("forecast_value_2022_12_forecast_id_idx", table_name="forecast_value_2022_12")
    op.drop_index("forecast_value_2022_12_target_time_idx", table_name="forecast_value_2022_12")
    op.drop_table("forecast_value_2022_12")
    op.drop_index("forecast_value_2023_03_created_utc_idx", table_name="forecast_value_2023_03")
    op.drop_index("forecast_value_2023_03_forecast_id_idx", table_name="forecast_value_2023_03")
    op.drop_index("forecast_value_2023_03_target_time_idx", table_name="forecast_value_2023_03")
    op.drop_table("forecast_value_2023_03")
    op.drop_index("forecast_value_2022_09_created_utc_idx", table_name="forecast_value_2022_09")
    op.drop_index("forecast_value_2022_09_forecast_id_idx", table_name="forecast_value_2022_09")
    op.drop_index("forecast_value_2022_09_target_time_idx", table_name="forecast_value_2022_09")
    op.drop_table("forecast_value_2022_09")
    op.drop_index("forecast_value_2023_02_created_utc_idx", table_name="forecast_value_2023_02")
    op.drop_index("forecast_value_2023_02_forecast_id_idx", table_name="forecast_value_2023_02")
    op.drop_index("forecast_value_2023_02_target_time_idx", table_name="forecast_value_2023_02")
    op.drop_table("forecast_value_2023_02")
    op.drop_index("forecast_value_2023_05_created_utc_idx", table_name="forecast_value_2023_05")
    op.drop_index("forecast_value_2023_05_forecast_id_idx", table_name="forecast_value_2023_05")
    op.drop_index("forecast_value_2023_05_target_time_idx", table_name="forecast_value_2023_05")
    op.drop_table("forecast_value_2023_05")
    op.drop_index("forecast_value_2022_10_created_utc_idx", table_name="forecast_value_2022_10")
    op.drop_index("forecast_value_2022_10_forecast_id_idx", table_name="forecast_value_2022_10")
    op.drop_index("forecast_value_2022_10_target_time_idx", table_name="forecast_value_2022_10")
    op.drop_table("forecast_value_2022_10")
    op.drop_index("forecast_value_2023_09_created_utc_idx", table_name="forecast_value_2023_09")
    op.drop_index("forecast_value_2023_09_forecast_id_idx", table_name="forecast_value_2023_09")
    op.drop_index("forecast_value_2023_09_target_time_idx", table_name="forecast_value_2023_09")
    op.drop_table("forecast_value_2023_09")
    op.drop_index("forecast_value_2023_11_created_utc_idx", table_name="forecast_value_2023_11")
    op.drop_index("forecast_value_2023_11_forecast_id_idx", table_name="forecast_value_2023_11")
    op.drop_index("forecast_value_2023_11_target_time_idx", table_name="forecast_value_2023_11")
    op.drop_table("forecast_value_2023_11")
    op.drop_index("forecast_value_2023_04_created_utc_idx", table_name="forecast_value_2023_04")
    op.drop_index("forecast_value_2023_04_forecast_id_idx", table_name="forecast_value_2023_04")
    op.drop_index("forecast_value_2023_04_target_time_idx", table_name="forecast_value_2023_04")
    op.drop_table("forecast_value_2023_04")
    op.drop_index("forecast_value_2023_06_created_utc_idx", table_name="forecast_value_2023_06")
    op.drop_index("forecast_value_2023_06_forecast_id_idx", table_name="forecast_value_2023_06")
    op.drop_index("forecast_value_2023_06_target_time_idx", table_name="forecast_value_2023_06")
    op.drop_table("forecast_value_2023_06")
    op.drop_index("forecast_value_2023_07_created_utc_idx", table_name="forecast_value_2023_07")
    op.drop_index("forecast_value_2023_07_forecast_id_idx", table_name="forecast_value_2023_07")
    op.drop_index("forecast_value_2023_07_target_time_idx", table_name="forecast_value_2023_07")
    op.drop_table("forecast_value_2023_07")
    op.drop_index("forecast_value_2023_12_created_utc_idx", table_name="forecast_value_2023_12")
    op.drop_index("forecast_value_2023_12_forecast_id_idx", table_name="forecast_value_2023_12")
    op.drop_index("forecast_value_2023_12_target_time_idx", table_name="forecast_value_2023_12")
    op.drop_table("forecast_value_2023_12")
    op.drop_index("forecast_value_2023_10_created_utc_idx", table_name="forecast_value_2023_10")
    op.drop_index("forecast_value_2023_10_forecast_id_idx", table_name="forecast_value_2023_10")
    op.drop_index("forecast_value_2023_10_target_time_idx", table_name="forecast_value_2023_10")
    op.drop_table("forecast_value_2023_10")
    op.drop_index("forecast_value_2022_08_created_utc_idx", table_name="forecast_value_2022_08")
    op.drop_index("forecast_value_2022_08_forecast_id_idx", table_name="forecast_value_2022_08")
    op.drop_index("forecast_value_2022_08_target_time_idx", table_name="forecast_value_2022_08")
    op.drop_table("forecast_value_2022_08")
    op.drop_index("forecast_value_2022_11_created_utc_idx", table_name="forecast_value_2022_11")
    op.drop_index("forecast_value_2022_11_forecast_id_idx", table_name="forecast_value_2022_11")
    op.drop_index("forecast_value_2022_11_target_time_idx", table_name="forecast_value_2022_11")
    op.drop_table("forecast_value_2022_11")
    # ### end Alembic commands ###


def upgrade():  # noqa
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "forecast_value_2022_11",
        sa.Column(
            "created_utc", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True
        ),
        sa.Column(
            "uuid",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "target_time", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False
        ),
        sa.Column(
            "expected_power_generation_megawatts",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("forecast_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["forecast_id"], ["forecast.id"], name="forecast_value_2022_11_forecast_id_fkey"
        ),
        sa.PrimaryKeyConstraint("uuid", "target_time", name="forecast_value_2022_11_pkey"),
    )
    op.create_index(
        "forecast_value_2022_11_target_time_idx",
        "forecast_value_2022_11",
        ["target_time"],
        unique=False,
    )
    op.create_index(
        "forecast_value_2022_11_forecast_id_idx",
        "forecast_value_2022_11",
        ["forecast_id"],
        unique=False,
    )
    op.create_index(
        "forecast_value_2022_11_created_utc_idx",
        "forecast_value_2022_11",
        ["created_utc"],
        unique=False,
    )
    op.create_table(
        "forecast_value_2022_08",
        sa.Column(
            "created_utc", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True
        ),
        sa.Column(
            "uuid",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "target_time", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False
        ),
        sa.Column(
            "expected_power_generation_megawatts",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("forecast_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["forecast_id"], ["forecast.id"], name="forecast_value_2022_08_forecast_id_fkey"
        ),
        sa.PrimaryKeyConstraint("uuid", "target_time", name="forecast_value_2022_08_pkey"),
    )
    op.create_index(
        "forecast_value_2022_08_target_time_idx",
        "forecast_value_2022_08",
        ["target_time"],
        unique=False,
    )
    op.create_index(
        "forecast_value_2022_08_forecast_id_idx",
        "forecast_value_2022_08",
        ["forecast_id"],
        unique=False,
    )
    op.create_index(
        "forecast_value_2022_08_created_utc_idx",
        "forecast_value_2022_08",
        ["created_utc"],
        unique=False,
    )
    op.create_table(
        "forecast_value_2023_10",
        sa.Column(
            "created_utc", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True
        ),
        sa.Column(
            "uuid",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "target_time", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False
        ),
        sa.Column(
            "expected_power_generation_megawatts",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("forecast_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["forecast_id"], ["forecast.id"], name="forecast_value_2023_10_forecast_id_fkey"
        ),
        sa.PrimaryKeyConstraint("uuid", "target_time", name="forecast_value_2023_10_pkey"),
    )
    op.create_index(
        "forecast_value_2023_10_target_time_idx",
        "forecast_value_2023_10",
        ["target_time"],
        unique=False,
    )
    op.create_index(
        "forecast_value_2023_10_forecast_id_idx",
        "forecast_value_2023_10",
        ["forecast_id"],
        unique=False,
    )
    op.create_index(
        "forecast_value_2023_10_created_utc_idx",
        "forecast_value_2023_10",
        ["created_utc"],
        unique=False,
    )
    op.create_table(
        "forecast_value_2023_12",
        sa.Column(
            "created_utc", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True
        ),
        sa.Column(
            "uuid",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "target_time", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False
        ),
        sa.Column(
            "expected_power_generation_megawatts",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("forecast_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["forecast_id"], ["forecast.id"], name="forecast_value_2023_12_forecast_id_fkey"
        ),
        sa.PrimaryKeyConstraint("uuid", "target_time", name="forecast_value_2023_12_pkey"),
    )
    op.create_index(
        "forecast_value_2023_12_target_time_idx",
        "forecast_value_2023_12",
        ["target_time"],
        unique=False,
    )
    op.create_index(
        "forecast_value_2023_12_forecast_id_idx",
        "forecast_value_2023_12",
        ["forecast_id"],
        unique=False,
    )
    op.create_index(
        "forecast_value_2023_12_created_utc_idx",
        "forecast_value_2023_12",
        ["created_utc"],
        unique=False,
    )
    op.create_table(
        "forecast_value_2023_07",
        sa.Column(
            "created_utc", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True
        ),
        sa.Column(
            "uuid",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "target_time", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False
        ),
        sa.Column(
            "expected_power_generation_megawatts",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("forecast_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["forecast_id"], ["forecast.id"], name="forecast_value_2023_07_forecast_id_fkey"
        ),
        sa.PrimaryKeyConstraint("uuid", "target_time", name="forecast_value_2023_07_pkey"),
    )
    op.create_index(
        "forecast_value_2023_07_target_time_idx",
        "forecast_value_2023_07",
        ["target_time"],
        unique=False,
    )
    op.create_index(
        "forecast_value_2023_07_forecast_id_idx",
        "forecast_value_2023_07",
        ["forecast_id"],
        unique=False,
    )
    op.create_index(
        "forecast_value_2023_07_created_utc_idx",
        "forecast_value_2023_07",
        ["created_utc"],
        unique=False,
    )
    op.create_table(
        "forecast_value_2023_06",
        sa.Column(
            "created_utc", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True
        ),
        sa.Column(
            "uuid",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "target_time", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False
        ),
        sa.Column(
            "expected_power_generation_megawatts",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("forecast_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["forecast_id"], ["forecast.id"], name="forecast_value_2023_06_forecast_id_fkey"
        ),
        sa.PrimaryKeyConstraint("uuid", "target_time", name="forecast_value_2023_06_pkey"),
    )
    op.create_index(
        "forecast_value_2023_06_target_time_idx",
        "forecast_value_2023_06",
        ["target_time"],
        unique=False,
    )
    op.create_index(
        "forecast_value_2023_06_forecast_id_idx",
        "forecast_value_2023_06",
        ["forecast_id"],
        unique=False,
    )
    op.create_index(
        "forecast_value_2023_06_created_utc_idx",
        "forecast_value_2023_06",
        ["created_utc"],
        unique=False,
    )
    op.create_table(
        "forecast_value_2023_04",
        sa.Column(
            "created_utc", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True
        ),
        sa.Column(
            "uuid",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "target_time", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False
        ),
        sa.Column(
            "expected_power_generation_megawatts",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("forecast_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["forecast_id"], ["forecast.id"], name="forecast_value_2023_04_forecast_id_fkey"
        ),
        sa.PrimaryKeyConstraint("uuid", "target_time", name="forecast_value_2023_04_pkey"),
    )
    op.create_index(
        "forecast_value_2023_04_target_time_idx",
        "forecast_value_2023_04",
        ["target_time"],
        unique=False,
    )
    op.create_index(
        "forecast_value_2023_04_forecast_id_idx",
        "forecast_value_2023_04",
        ["forecast_id"],
        unique=False,
    )
    op.create_index(
        "forecast_value_2023_04_created_utc_idx",
        "forecast_value_2023_04",
        ["created_utc"],
        unique=False,
    )
    op.create_table(
        "forecast_value_2023_11",
        sa.Column(
            "created_utc", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True
        ),
        sa.Column(
            "uuid",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "target_time", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False
        ),
        sa.Column(
            "expected_power_generation_megawatts",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("forecast_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["forecast_id"], ["forecast.id"], name="forecast_value_2023_11_forecast_id_fkey"
        ),
        sa.PrimaryKeyConstraint("uuid", "target_time", name="forecast_value_2023_11_pkey"),
    )
    op.create_index(
        "forecast_value_2023_11_target_time_idx",
        "forecast_value_2023_11",
        ["target_time"],
        unique=False,
    )
    op.create_index(
        "forecast_value_2023_11_forecast_id_idx",
        "forecast_value_2023_11",
        ["forecast_id"],
        unique=False,
    )
    op.create_index(
        "forecast_value_2023_11_created_utc_idx",
        "forecast_value_2023_11",
        ["created_utc"],
        unique=False,
    )
    op.create_table(
        "forecast_value_2023_09",
        sa.Column(
            "created_utc", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True
        ),
        sa.Column(
            "uuid",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "target_time", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False
        ),
        sa.Column(
            "expected_power_generation_megawatts",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("forecast_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["forecast_id"], ["forecast.id"], name="forecast_value_2023_09_forecast_id_fkey"
        ),
        sa.PrimaryKeyConstraint("uuid", "target_time", name="forecast_value_2023_09_pkey"),
    )
    op.create_index(
        "forecast_value_2023_09_target_time_idx",
        "forecast_value_2023_09",
        ["target_time"],
        unique=False,
    )
    op.create_index(
        "forecast_value_2023_09_forecast_id_idx",
        "forecast_value_2023_09",
        ["forecast_id"],
        unique=False,
    )
    op.create_index(
        "forecast_value_2023_09_created_utc_idx",
        "forecast_value_2023_09",
        ["created_utc"],
        unique=False,
    )
    op.create_table(
        "forecast_value_2022_10",
        sa.Column(
            "created_utc", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True
        ),
        sa.Column(
            "uuid",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "target_time", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False
        ),
        sa.Column(
            "expected_power_generation_megawatts",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("forecast_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["forecast_id"], ["forecast.id"], name="forecast_value_2022_10_forecast_id_fkey"
        ),
        sa.PrimaryKeyConstraint("uuid", "target_time", name="forecast_value_2022_10_pkey"),
    )
    op.create_index(
        "forecast_value_2022_10_target_time_idx",
        "forecast_value_2022_10",
        ["target_time"],
        unique=False,
    )
    op.create_index(
        "forecast_value_2022_10_forecast_id_idx",
        "forecast_value_2022_10",
        ["forecast_id"],
        unique=False,
    )
    op.create_index(
        "forecast_value_2022_10_created_utc_idx",
        "forecast_value_2022_10",
        ["created_utc"],
        unique=False,
    )
    op.create_table(
        "forecast_value_2023_05",
        sa.Column(
            "created_utc", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True
        ),
        sa.Column(
            "uuid",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "target_time", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False
        ),
        sa.Column(
            "expected_power_generation_megawatts",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("forecast_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["forecast_id"], ["forecast.id"], name="forecast_value_2023_05_forecast_id_fkey"
        ),
        sa.PrimaryKeyConstraint("uuid", "target_time", name="forecast_value_2023_05_pkey"),
    )
    op.create_index(
        "forecast_value_2023_05_target_time_idx",
        "forecast_value_2023_05",
        ["target_time"],
        unique=False,
    )
    op.create_index(
        "forecast_value_2023_05_forecast_id_idx",
        "forecast_value_2023_05",
        ["forecast_id"],
        unique=False,
    )
    op.create_index(
        "forecast_value_2023_05_created_utc_idx",
        "forecast_value_2023_05",
        ["created_utc"],
        unique=False,
    )
    op.create_table(
        "forecast_value_2023_02",
        sa.Column(
            "created_utc", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True
        ),
        sa.Column(
            "uuid",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "target_time", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False
        ),
        sa.Column(
            "expected_power_generation_megawatts",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("forecast_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["forecast_id"], ["forecast.id"], name="forecast_value_2023_02_forecast_id_fkey"
        ),
        sa.PrimaryKeyConstraint("uuid", "target_time", name="forecast_value_2023_02_pkey"),
    )
    op.create_index(
        "forecast_value_2023_02_target_time_idx",
        "forecast_value_2023_02",
        ["target_time"],
        unique=False,
    )
    op.create_index(
        "forecast_value_2023_02_forecast_id_idx",
        "forecast_value_2023_02",
        ["forecast_id"],
        unique=False,
    )
    op.create_index(
        "forecast_value_2023_02_created_utc_idx",
        "forecast_value_2023_02",
        ["created_utc"],
        unique=False,
    )
    op.create_table(
        "forecast_value_2022_09",
        sa.Column(
            "created_utc", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True
        ),
        sa.Column(
            "uuid",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "target_time", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False
        ),
        sa.Column(
            "expected_power_generation_megawatts",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("forecast_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["forecast_id"], ["forecast.id"], name="forecast_value_2022_09_forecast_id_fkey"
        ),
        sa.PrimaryKeyConstraint("uuid", "target_time", name="forecast_value_2022_09_pkey"),
    )
    op.create_index(
        "forecast_value_2022_09_target_time_idx",
        "forecast_value_2022_09",
        ["target_time"],
        unique=False,
    )
    op.create_index(
        "forecast_value_2022_09_forecast_id_idx",
        "forecast_value_2022_09",
        ["forecast_id"],
        unique=False,
    )
    op.create_index(
        "forecast_value_2022_09_created_utc_idx",
        "forecast_value_2022_09",
        ["created_utc"],
        unique=False,
    )
    op.create_table(
        "forecast_value_2023_03",
        sa.Column(
            "created_utc", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True
        ),
        sa.Column(
            "uuid",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "target_time", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False
        ),
        sa.Column(
            "expected_power_generation_megawatts",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("forecast_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["forecast_id"], ["forecast.id"], name="forecast_value_2023_03_forecast_id_fkey"
        ),
        sa.PrimaryKeyConstraint("uuid", "target_time", name="forecast_value_2023_03_pkey"),
    )
    op.create_index(
        "forecast_value_2023_03_target_time_idx",
        "forecast_value_2023_03",
        ["target_time"],
        unique=False,
    )
    op.create_index(
        "forecast_value_2023_03_forecast_id_idx",
        "forecast_value_2023_03",
        ["forecast_id"],
        unique=False,
    )
    op.create_index(
        "forecast_value_2023_03_created_utc_idx",
        "forecast_value_2023_03",
        ["created_utc"],
        unique=False,
    )
    op.create_table(
        "forecast_value_2022_12",
        sa.Column(
            "created_utc", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True
        ),
        sa.Column(
            "uuid",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "target_time", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False
        ),
        sa.Column(
            "expected_power_generation_megawatts",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("forecast_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["forecast_id"], ["forecast.id"], name="forecast_value_2022_12_forecast_id_fkey"
        ),
        sa.PrimaryKeyConstraint("uuid", "target_time", name="forecast_value_2022_12_pkey"),
    )
    op.create_index(
        "forecast_value_2022_12_target_time_idx",
        "forecast_value_2022_12",
        ["target_time"],
        unique=False,
    )
    op.create_index(
        "forecast_value_2022_12_forecast_id_idx",
        "forecast_value_2022_12",
        ["forecast_id"],
        unique=False,
    )
    op.create_index(
        "forecast_value_2022_12_created_utc_idx",
        "forecast_value_2022_12",
        ["created_utc"],
        unique=False,
    )
    op.create_table(
        "forecast_value_2023_01",
        sa.Column(
            "created_utc", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True
        ),
        sa.Column(
            "uuid",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "target_time", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False
        ),
        sa.Column(
            "expected_power_generation_megawatts",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("forecast_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["forecast_id"], ["forecast.id"], name="forecast_value_2023_01_forecast_id_fkey"
        ),
        sa.PrimaryKeyConstraint("uuid", "target_time", name="forecast_value_2023_01_pkey"),
    )
    op.create_index(
        "forecast_value_2023_01_target_time_idx",
        "forecast_value_2023_01",
        ["target_time"],
        unique=False,
    )
    op.create_index(
        "forecast_value_2023_01_forecast_id_idx",
        "forecast_value_2023_01",
        ["forecast_id"],
        unique=False,
    )
    op.create_index(
        "forecast_value_2023_01_created_utc_idx",
        "forecast_value_2023_01",
        ["created_utc"],
        unique=False,
    )
    op.create_table(
        "forecast_value_2023_08",
        sa.Column(
            "created_utc", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True
        ),
        sa.Column(
            "uuid",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "target_time", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False
        ),
        sa.Column(
            "expected_power_generation_megawatts",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("forecast_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["forecast_id"], ["forecast.id"], name="forecast_value_2023_08_forecast_id_fkey"
        ),
        sa.PrimaryKeyConstraint("uuid", "target_time", name="forecast_value_2023_08_pkey"),
    )
    op.create_index(
        "forecast_value_2023_08_target_time_idx",
        "forecast_value_2023_08",
        ["target_time"],
        unique=False,
    )
    op.create_index(
        "forecast_value_2023_08_forecast_id_idx",
        "forecast_value_2023_08",
        ["forecast_id"],
        unique=False,
    )
    op.create_index(
        "forecast_value_2023_08_created_utc_idx",
        "forecast_value_2023_08",
        ["created_utc"],
        unique=False,
    )
    # ### end Alembic commands ###
